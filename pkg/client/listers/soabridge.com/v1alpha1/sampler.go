/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kimba74/sandbox-k8s-controller/pkg/apis/soabridge.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SamplerLister helps list Samplers.
type SamplerLister interface {
	// List lists all Samplers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Sampler, err error)
	// Samplers returns an object that can list and get Samplers.
	Samplers(namespace string) SamplerNamespaceLister
	SamplerListerExpansion
}

// samplerLister implements the SamplerLister interface.
type samplerLister struct {
	indexer cache.Indexer
}

// NewSamplerLister returns a new SamplerLister.
func NewSamplerLister(indexer cache.Indexer) SamplerLister {
	return &samplerLister{indexer: indexer}
}

// List lists all Samplers in the indexer.
func (s *samplerLister) List(selector labels.Selector) (ret []*v1alpha1.Sampler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sampler))
	})
	return ret, err
}

// Samplers returns an object that can list and get Samplers.
func (s *samplerLister) Samplers(namespace string) SamplerNamespaceLister {
	return samplerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SamplerNamespaceLister helps list and get Samplers.
type SamplerNamespaceLister interface {
	// List lists all Samplers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Sampler, err error)
	// Get retrieves the Sampler from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Sampler, error)
	SamplerNamespaceListerExpansion
}

// samplerNamespaceLister implements the SamplerNamespaceLister
// interface.
type samplerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Samplers in the indexer for a given namespace.
func (s samplerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sampler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sampler))
	})
	return ret, err
}

// Get retrieves the Sampler from the indexer for a given namespace and name.
func (s samplerNamespaceLister) Get(name string) (*v1alpha1.Sampler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sampler"), name)
	}
	return obj.(*v1alpha1.Sampler), nil
}
